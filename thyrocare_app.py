import streamlit as st
import numpy as np
import joblib
import pandas as pd
from PIL import Image

path_model_risk='model_risk.pkl'
path_model_diag='model_diag.pkl'
path_scaler='scaler.pkl'
path_thresholds_risk='thresholds_risk.npy'
path_thresholds_diag='threshold_diag.npy'
path_model_diag2='model_diag2.pkl'

model_risk = joblib.load(path_model_risk)
model_diag = joblib.load(path_model_diag)
scaler = joblib.load(path_scaler)
thresholds_risk = np.load(path_thresholds_risk)
threshold_diag = np.load(path_thresholds_diag)
model_diag2=joblib.load(path_model_diag2)

st.set_page_config(page_title="ThyroCare", layout="centered")

st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@400;600;700&display=swap');

    html, body, [class*="css"]  {
        font-family: 'Quicksand', sans-serif;
    }
    .main {
        background-color: #f5f8fa;
    }
    .title {
        color: #cc521d;
        font-size: 42px;
        font-weight: 700;
        margin-top: 10px;
        margin-bottom: 0px;
    }
    .subtitle {
        font-size: 20px;
        color: #ed5c29;
        margin-bottom: 30px;
    }
    .card {
        background-color: #fff;
        padding: 25px;
        border-radius: 16px;
        box-shadow: 0 4px 14px rgba(0, 0, 0, 0.07);
        margin-bottom: 30px;
        border: 2px solid #ffd3c5;
    }
    .result-risk {
        background-color: #ffecd9;
        border-left: 6px solid #ed5c29;
        padding: 20px;
        border-radius: 12px;
    }
    .result-diagnosis {
        background-color: #ffe9e4;
        border-left: 6px solid #cc521d;
        padding: 20px;
        border-radius: 12px;
    }
</style>
""", unsafe_allow_html=True)

logo_path = "logo_super.png"
logo = Image.open(logo_path)

        
col1, col2 = st.columns([1, 5])

with col1:
    st.image(logo, width=60)

with col2:
    st.markdown("<div class='title'>ThyroCare</div>", unsafe_allow_html=True)
    st.markdown("<div class='subtitle'>–í–∏—è–≤–∏—Ç–∏ —Ä–∏–∑–∏–∫ ‚Äî –∑–º–µ–Ω—à–∏—Ç–∏ –∑–∞–≥—Ä–æ–∑—É</div>", unsafe_allow_html=True)


st.markdown("""
<div style='background-color:#fff4ed; padding:25px 40px; border-radius:18px; margin-top:10px; margin-bottom:30px;'>
    <p style='font-size:17px; line-height:1.6; margin:0; color:#3c3c3c;'>
        <strong>ThyroCare</strong> ‚Äî —Ü–µ –ø–µ—Ä—à–∞ AI-—Å–∏—Å—Ç–µ–º–∞ –≤ –£–∫—Ä–∞—ó–Ω—ñ, —è–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –æ—Ü—ñ–Ω–∏—Ç–∏ —Ä–∏–∑–∏–∫ –ø–æ—è–≤–∏ –∑–ª–æ—è–∫—ñ—Å–Ω–æ—ó –ø—É—Ö–ª–∏–Ω–∏ —Ä–∞–∫—É —â–∏—Ç–æ–ø–æ–¥—ñ–±–Ω–æ—ó –∑–∞–ª–æ–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ 
        –≤–∞—à–∏—Ö –º–µ–¥–∏—á–Ω–∏—Ö —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤.</br>
        –ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤–∏—Ä—ñ—à—É—î –ø—Ä–æ–±–ª–µ–º—É –∑–∞—Ç—Ä–∏–º–∫–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É —Ç–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—é –¥–ª—è –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤. </br> 
        –õ–∏—à–µ –∑ –Ω–∞–º–∏
        –≤–∏ –∑–º–æ–∂–µ—Ç–µ —à–≤–∏–¥–∫–æ —Ç–∞ –±–µ–∑ –∑–∞–π–≤–∏—Ö –≤–∏—Ç—Ä–∞—Ç –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Å–≤—ñ–π —Ä–∏–∑–∏–∫ —ñ –Ω–µ –≤–∏—Ç—Ä–∞—á–∞—Ç–∏ —Ç–∏–∂–Ω—ñ –Ω–∞ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è.
    </p>
</div>
""", unsafe_allow_html=True)


st.markdown("<div class='card'>–í–≤–µ–¥—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω—ñ –º–µ–¥–∏—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏, —â–æ–± –æ—Ü—ñ–Ω–∏—Ç–∏ —Ä–∏–∑–∏–∫ –ø–æ—è–≤–∏ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è:</div>", unsafe_allow_html=True)

age = st.number_input("–í—ñ–∫", 0, 120, step=1)
gender = st.radio("–°—Ç–∞—Ç—å", ["–ñ—ñ–Ω–æ—á–∞", "–ß–æ–ª–æ–≤—ñ—á–∞"])
gender_code = 0 if gender == "–ñ—ñ–Ω–æ—á–∞" else 1


# –ü–æ—á–∞—Ç–∫–æ–≤—ñ –º–∞–ø—ñ–Ω–≥–∏ 
country_mapping = {
    10: '–£–∫—Ä–∞—ó–Ω–∞', 0: '–ë—Ä–∞–∑–∏–ª—ñ—è', 1: '–ö–∏—Ç–∞–π', 2: '–ù—ñ–º–µ—á—á–∏–Ω–∞', 3: '–Ü–Ω–¥—ñ—è', 4: '–Ø–ø–æ–Ω—ñ—è',
    5: '–ù—ñ–≥–µ—Ä—ñ—è', 6: '—Ä–æ—Å—ñ—è', 7: '–ü—ñ–≤–¥–µ–Ω–Ω–∞ –ö–æ—Ä–µ—è', 8: '–í–µ–ª–∏–∫–∞ –ë—Ä–∏—Ç–∞–Ω—ñ—è', 9: '–°–®–ê'
}
ethnicity_mapping = {
    5: "–°–ª–æ–≤'—è–Ω–∏–Ω", 0: '–ê—Ñ—Ä–∏–∫–∞–Ω–µ—Ü—å', 1: '–ê–∑—ñ—î—Ü—å', 2: '–ö–∞–≤–∫–∞–∑–µ—Ü—å', 3: '–õ–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω–µ—Ü—å', 4: '–ë–ª–∏–∑—å–∫–æ—Å—Ö—ñ–¥–Ω–∏–π'
}
country_to_code = {v.lower(): k for k, v in country_mapping.items()}
visible_countries = [name for name in country_mapping.values() if name.lower() != "—Ä–æ—Å—ñ—è"]

ethnicity_to_code = {v.lower(): k for k, v in ethnicity_mapping.items()}

st.markdown("""
    <style>
        .country-label, .ethnicity-label {
            font-size: 19px;  
            font-weight: 600;  
        }
    </style>
""", unsafe_allow_html=True)

# –ö—Ä–∞—ó–Ω–∞ 
st.markdown('<div class="country-label">–í–∫–∞–∂—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –≤–∞—à–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è.</div>', unsafe_allow_html=True)
st.markdown("–ù–∞–ø—Ä–∏–∫–ª–∞–¥, " + ", ".join(f"`{c}`" for c in visible_countries))
country_input = st.text_input("–í–≤–µ–¥—ñ—Ç—å –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤, –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏.").strip().lower()

if country_input:
    if country_input in country_to_code:
        country_code = country_to_code[country_input]
    else:
        country_code = max(country_to_code.values()) + 1
        country_to_code[country_input] = country_code
        st.info(f"–ù–æ–≤–∞ –∫—Ä–∞—ó–Ω–∞ '{country_input}' –¥–æ–¥–∞–Ω–∞ –∑ –∫–æ–¥–æ–º {country_code}")
else:
    st.warning("‚ùó –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫—Ä–∞—ó–Ω–∏")
    country_code = -1  


# –ï—Ç–Ω—ñ—á–Ω–∞ –≥—Ä—É–ø–∞ 
st.markdown('<div class="ethnicity-label">–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –µ—Ç–Ω—ñ—á–Ω–µ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è.</div>', unsafe_allow_html=True)
st.markdown("–ù–∞–ø—Ä–∏–∫–ª–∞–¥, `" + "`, `".join(ethnicity_to_code.keys()) + "`")
ethnicity_input = st.text_input("–í–≤–µ–¥—ñ—Ç—å –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤.").strip().lower()

if ethnicity_input:
    if ethnicity_input in ethnicity_to_code:
        ethnicity_code = ethnicity_to_code[ethnicity_input]
    else:
        ethnicity_code = max(ethnicity_to_code.values()) + 1
        ethnicity_to_code[ethnicity_input] = ethnicity_code
        st.info(f"–ù–æ–≤–∞ –µ—Ç–Ω—ñ—á–Ω–∞ –≥—Ä—É–ø–∞ '{ethnicity_input}' –¥–æ–¥–∞–Ω–∞ –∑ –∫–æ–¥–æ–º {ethnicity_code}")
else:
    st.warning("‚ùó –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –µ—Ç–Ω—ñ—á–Ω–æ—ó –≥—Ä—É–ø–∏")
    ethnicity_code = -1


# –ú–µ–¥–∏—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ 

family_history = st.radio("–ß–∏ —î —É –≤–∞—Å —Å—ñ–º–µ–π–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è?", ["–ù—ñ", "–¢–∞–∫"])
radiation = st.radio("–ß–∏ –º–∞–ª–∏ –≤–∏–ø–∞–¥–æ–∫ –∑–Ω–∞—á–Ω–æ–≥–æ —Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–æ–≥–æ –æ–ø—Ä–æ–º—ñ–Ω–µ–Ω–Ω—è?", ["–ù—ñ", "–¢–∞–∫"])
iodine = st.radio("–ß–∏ —î —É –≤–∞—Å –¥–µ—Ñ—ñ—Ü–∏—Ç –π–æ–¥—É?", ["–ù—ñ", "–¢–∞–∫"])
smoking = st.radio("–ß–∏ –ø–∞–ª–∏—Ç–µ –≤–∏?", ["–ù—ñ", "–¢–∞–∫"])
obesity = st.radio("–ù–∞—è–≤–Ω—ñ—Å—Ç—å –∂–∏—Ä—ñ–Ω–Ω—è", ["–ù—ñ", "–¢–∞–∫"])
diabetes = st.radio("–ù–∞—è–≤–Ω—ñ—Å—Ç—å —Ü—É–∫—Ä–æ–≤–æ–≥–æ –¥—ñ–∞–±–µ—Ç—É", ["–ù—ñ", "–¢–∞–∫"])

tsh = st.number_input("TSH —Ä—ñ–≤–µ–Ω—å", min_value=0.0, format="%.2f")
t3 = st.number_input("T3 —Ä—ñ–≤–µ–Ω—å", min_value=0.0, format="%.2f")
t4 = st.number_input("T4 —Ä—ñ–≤–µ–Ω—å", min_value=0.0, format="%.2f")
nodule = st.number_input("–†–æ–∑–º—ñ—Ä –≤—É–∑–ª–∞ (–º–º)", min_value=0.0, format="%.2f")

exclude_country_ethnicity = st.checkbox("–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –∫—Ä–∞—ó–Ω—É —Ç–∞ –µ—Ç–Ω—ñ—á–Ω—ñ—Å—Ç—å –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")

if st.button("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏"):
    with st.spinner('–ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑—É—î...'):
        # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó —á–∞—Å—É –æ–±—á–∏—Å–ª–µ–Ω—å (4 —Å–µ–∫—É–Ω–¥–∏)
        time.sleep(4)
    user_input = {
        'Age': age,
        'Gender': gender_code,
        'Country': country_code,
        'Ethnicity': ethnicity_code,
        'Family_History': 1 if family_history == "–¢–∞–∫" else 0,
        'Radiation_Exposure': 1 if radiation == "–¢–∞–∫" else 0,
        'Iodine_Deficiency': 1 if iodine == "–¢–∞–∫" else 0,
        'Smoking': 1 if smoking == "–¢–∞–∫" else 0,
        'Obesity': 1 if obesity == "–¢–∞–∫" else 0,
        'Diabetes': 1 if diabetes == "–¢–∞–∫" else 0,
        'TSH_Level': tsh,
        'T3_Level': t3,
        'T4_Level': t4,
        'Nodule_Size': nodule
    }
    try:
        user_input['Combination'] = str(user_input['Smoking']) + str(user_input['Obesity']) + str(user_input['Diabetes'])
        user_input['Combination'] = int(user_input['Combination'], 2)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ –æ–∑–Ω–∞–∫: {e}")
        
    X_user = pd.DataFrame([user_input])
    X_user = X_user.drop(columns=['Diabetes', 'Obesity', 'Smoking'])  

    cols_to_scale = ['TSH_Level', 'T3_Level', 'T4_Level', 'Nodule_Size']
    X_user[cols_to_scale] = scaler.transform(X_user[cols_to_scale])

    y_prob_risk = model_risk.predict_proba(X_user)[0]
    thresholds_risk = np.load(path_thresholds_risk)
    if y_prob_risk[0] >= 0.5:  # –ö–ª–∞—Å 1 
        predicted_risk = 1
    elif y_prob_risk[1] >= 0.5:  # –ö–ª–∞—Å 2 
        predicted_risk = 2
    elif y_prob_risk[2] >= 0.5:  # –ö–ª–∞—Å 3 
        predicted_risk = 3
    else:
        predicted_risk = 3
    
    risk_labels = {1: "–ù–∏–∑—å–∫–∏–π —Ä–∏–∑–∏–∫", 2: "–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∏–∑–∏–∫", 3: "–í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫"}
    
    if exclude_country_ethnicity:
        X_user = X_user.drop(columns=['Country', 'Ethnicity'])  
        model_diag_used = model_diag2  
        threshold_diag = 0.355  
    else:
        model_diag_used = model_diag  
        threshold_diag = 0.24  
    
    y_prob_diag = model_diag_used.predict_proba(X_user)[0]

    if y_prob_diag[1] >= threshold_diag:
        predicted_diag = 1  
    else:
        predicted_diag = 0  

    diagnosis_labels = {0: "–î–æ–±—Ä–æ—è–∫—ñ—Å–Ω–∏–π –≤—É–∑–æ–ª", 1: "–ó–ª–æ—è–∫—ñ—Å–Ω–µ —É—Ç–≤–æ—Ä–µ–Ω–Ω—è"}
    

    st.markdown("### ü©∫ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É:")
    st.success(f"**–†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É:** {risk_labels.get(predicted_risk, '???')}")
    st.info(f"**–ô–º–æ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø —É—Ç–≤–æ—Ä–µ–Ω–Ω—è:** {diagnosis_labels.get(predicted_diag, '???')}")
    
    if predicted_diag == 1:
        st.warning("‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:** –ô–º–æ–≤—ñ—Ä–Ω–µ –∑–ª–æ—è–∫—ñ—Å–Ω–µ —É—Ç–≤–æ—Ä–µ–Ω–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –æ–±—Å—Ç–µ–∂–µ–Ω—å —Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π.")
